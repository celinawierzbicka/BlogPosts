{"version":3,"sources":["apis/jsonPlaceholder.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postsReducer.js","reducers/usersReducer.js","index.js"],"names":["axios","create","baseURL","fetchPosts","dispatch","a","jsonPlaceholder","get","response","type","payload","data","fetchUser","id","UserHeader","user","this","props","className","name","React","Component","connect","state","ownProps","users","find","userId","PostList","fetchPostsAndUsers","posts","map","post","key","title","body","renderList","getState","_","chain","uniq","forEach","value","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"+QAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,yCCaAC,EAAY,WACrB,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEACoBC,EAAgBC,IAAI,SADxC,OACGC,EADH,OAGHJ,EAAS,CAAEK,KAAM,cAAeC,QAASF,EAASG,OAH/C,2CAAP,uDAQSC,EAAY,SAACC,GACtB,8CAAO,WAAOT,GAAP,eAAAC,EAAA,sEACoBC,EAAgBC,IAAhB,gBAA6BM,IADjD,OACGL,EADH,OAGHJ,EAAS,CAAEK,KAAM,aAAcC,QAASF,EAASG,OAH9C,2CAAP,uDCvBEG,E,uKACQ,IACEC,EAASC,KAAKC,MAAdF,KAER,OAAIA,EAKA,yBAAKG,UAAU,UACVH,EAAKI,MALH,S,GALMC,IAAMC,WAoBhBC,eAJS,SAACC,EAAOC,GAC5B,MAAO,CAACT,KAAMQ,EAAME,MAAMC,MAAK,SAAAX,GAAI,OAAIA,EAAKF,KAAOW,EAASG,aAGjDL,CAAyBR,GClBlCc,E,kLAEEZ,KAAKC,MAAMY,uB,mCAIX,OAAOb,KAAKC,MAAMa,MAAMC,KAAI,SAAAC,GACxB,OACI,yBAAKd,UAAU,OAAOe,IAAKD,EAAKnB,IAC5B,uBAAGK,UAAU,mCACb,yBAAKA,UAAU,WACX,yBAAKA,UAAU,gBACX,4BAAKc,EAAKE,OACV,2BAAIF,EAAKG,OAEb,kBAAC,EAAD,CAAYR,OAAQK,EAAKL,gB,+BAQzC,OAAO,yBAAKT,UAAU,2BAA2BF,KAAKoB,kB,GAvBvChB,IAAMC,WA+BdC,eAJS,SAACC,GACrB,MAAO,CAAEO,MAAOP,EAAMO,SAGc,CAAED,mBFjCR,yDAAM,WAAOzB,EAAUiC,GAAjB,SAAAhC,EAAA,sEAC9BD,EAASD,KADqB,OAMpCmC,IAAEC,MAAMF,IAAWP,OACdC,IAAI,UACJS,OACAC,SAAQ,SAAA5B,GAAE,OAAIT,EAASQ,EAAUC,OACjC6B,QAV+B,2CAAN,0DEiCnBpB,CAAoEM,GCzBpEe,EARH,WACR,OACA,yBAAKzB,UAAU,gBACX,kBAAC,EAAD,Q,QCFO0B,cAAgB,CAC3Bd,MCLW,WAAyB,IAAxBP,EAAuB,uDAAf,GAAIsB,EAAW,uCACnC,OAAOA,EAAOpC,MACV,IAAK,cACD,OAAOoC,EAAOnC,QAClB,QACI,OAAOa,IDCfE,MENW,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIsB,EAAW,uCACnC,OAAOA,EAAOpC,MACV,IAAK,aACD,MAAM,GAAN,mBAAWc,GAAX,CAAkBsB,EAAOnC,UAC7B,QACI,OAAOa,MCIbuB,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAEJO,SAASC,cAAc,Y","file":"static/js/main.8c1bc414.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://jsonplaceholder.typicode.com\"\r\n});","import _ from 'lodash';\r\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\r\n\r\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\r\n    await dispatch(fetchPosts());\r\n\r\n    // const userIds = _.uniq(_.map(getState().posts, 'userId'));\r\n    // userIds.forEach(id => dispatch(fetchUser(id)));\r\n\r\n    _.chain(getState().posts)\r\n        .map('userId')\r\n        .uniq()\r\n        .forEach(id => dispatch(fetchUser(id)))\r\n        .value();\r\n}\r\n\r\nexport const fetchPosts =() => {\r\n    return async (dispatch) => {\r\n        const response = await jsonPlaceholder.get('posts');\r\n\r\n        dispatch({ type: 'FETCH_POSTS', payload: response.data });\r\n\r\n    };\r\n};\r\n\r\nexport const fetchUser = (id) => {\r\n    return async (dispatch) => {\r\n        const response = await jsonPlaceholder.get(`users/${id}`);\r\n\r\n        dispatch({ type: 'FETCH_USER', payload: response.data });\r\n\r\n    };\r\n};\r\n\r\n\r\n// export const fetchUser =(id) => {\r\n//     return (dispatch) => {\r\n//         _fetchUser(id, dispatch)\r\n//     };\r\n// };\r\n\r\n// const _fetchUser = _.memoize(async (id, dispatch) => {\r\n//     const response = await jsonPlaceholder.get(`users/${id}`);\r\n\r\n//     dispatch({ type: 'FETCH_USER', payload: response.data });\r\n// });","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass UserHeader extends React.Component {\r\n    render() {\r\n        const { user } = this.props;\r\n\r\n        if(!user) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"header\">\r\n                {user.name}\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {user: state.users.find(user => user.id === ownProps.userId)}\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserHeader);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPostsAndUsers } from '../actions';\r\nimport UserHeader from './UserHeader'\r\n\r\nclass PostList extends React.Component {\r\n    componentDidMount() {\r\n        this.props.fetchPostsAndUsers()\r\n    };\r\n\r\n    renderList() {\r\n        return this.props.posts.map(post => {\r\n            return (\r\n                <div className=\"item\" key={post.id}>\r\n                    <i className=\"large middle aligned icon user\" />\r\n                    <div className=\"content\">\r\n                        <div className=\"descrioption\">\r\n                            <h2>{post.title}</h2>\r\n                            <p>{post.body}</p>\r\n                        </div>\r\n                        <UserHeader userId={post.userId} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"ui relaxed divided list\">{this.renderList()}</div>\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { posts: state.posts }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchPostsAndUsers: fetchPostsAndUsers})(PostList);","import React from 'react';\r\nimport PostList from './PostList';\r\n\r\nconst App = () => {\r\n    return (\r\n    <div className=\"ui container\">\r\n        <PostList />\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default App;","import { combineReducers } from 'redux';\r\nimport postsReducer from './postsReducer';\r\nimport usersReducer from './usersReducer';\r\n\r\nexport default combineReducers({ \r\n    posts: postsReducer,\r\n    users: usersReducer\r\n});","export default (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'FETCH_POSTS':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    };\r\n};","export default (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'FETCH_USER':\r\n            return [...state, action.payload];\r\n        default:\r\n            return state;\r\n    };\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport App from './components/App'\r\nimport reducers from './reducers';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.querySelector('#root')\r\n)"],"sourceRoot":""}